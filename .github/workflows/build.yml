# .github/workflows/build.yml

name: Build Augment Extension

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'
  push:
    paths:
      - '.github/workflows/**'

env:
  INTERCEPTOR_SCRIPT: 'augment-interceptor.js'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Latest VSIX
        run: |
          PUBLISHER="augment"
          EXTENSION_NAME="vscode-augment"
          VSIX_URL="https://marketplace.visualstudio.com/_apis/public/gallery/publishers/${PUBLISHER}/vsextensions/${EXTENSION_NAME}/latest/vspackage"
          curl -L --compressed -o original.vsix "${VSIX_URL}"
          echo "VSIX downloaded successfully."

      - name: Unpack VSIX
        run: |
          unzip -q original.vsix -d unpacked_ext
          echo "VSIX unpacked successfully."

      - name: Get extension version
        id: get_version
        run: |
          VERSION=$(jq -r .version unpacked_ext/extension/package.json)
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Discovered extension version: ${VERSION}"
      
      - name: Check if version already exists
        id: version_check
        run: |
          TAG_NAME="v${{ env.VERSION }}-patched"
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "Tag ${TAG_NAME} already exists."
            echo "skip_build=true" >> $GITHUB_OUTPUT
          else
            echo "New version ${{ env.VERSION }} detected."
            echo "skip_build=false" >> $GITHUB_OUTPUT
          fi

      - name: Skip build notification
        if: steps.version_check.outputs.skip_build == 'true'
        run: echo "✅ Version ${{ env.VERSION }} is already released. Skipping build."

      # --- Conditional build steps start here ---

      - name: Setup Node.js
        if: steps.version_check.outputs.skip_build == 'false'
        id: setup_node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules
        if: steps.version_check.outputs.skip_build == 'false'
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.setup_node.outputs.node-version }}-${{ hashFiles('unpacked_ext/extension/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.setup_node.outputs.node-version }}-
            ${{ runner.os }}-node-

      # 终极优化：直接从 package.json 读取 main 入口文件并应用补丁
      - name: Install dependencies and Patch
        if: steps.version_check.outputs.skip_build == 'false'
        working-directory: ./unpacked_ext/extension
        run: |
          echo "--- Installing dependencies ---"
          npm install -g @vscode/vsce
          npm install
          echo "node_modules/" > .vscodeignore
          
          echo "--- Patching extension ---"
          # 从 package.json 中动态读取 main 入口文件路径
          MAIN_JS_PATH=$(jq -r .main package.json)
          
          # 健壮性检查：确保路径存在且不为空
          if [ -z "$MAIN_JS_PATH" ]; then
            echo "Error: Could not find 'main' entry in package.json."
            exit 1
          elif [ ! -f "$MAIN_JS_PATH" ]; then
            echo "Error: The main file specified in package.json ('$MAIN_JS_PATH') does not exist."
            exit 1
          fi
          
          echo "Found main entry point at: $MAIN_JS_PATH"
          
          # 对找到的入口文件应用补丁（原地替换）
          TEMP_FILE=$(mktemp)
          cat ../../${{ env.INTERCEPTOR_SCRIPT }} "$MAIN_JS_PATH" > "$TEMP_FILE" && mv "$TEMP_FILE" "$MAIN_JS_PATH"
          echo "Patch applied successfully (in-place replacement)."

      - name: Copy templates file
        if: steps.version_check.outputs.skip_build == 'false'
        run: |
          cp hardware-templates.json unpacked_ext/extension/hardware-templates.json
          echo "Copied hardware-templates.json into the extension package."

      - name: Repackage Patched VSIX
        if: steps.version_check.outputs.skip_build == 'false'
        id: repackage
        run: |
          PATCHED_VSIX_NAME="augment.vscode-augment-${{ env.VERSION }}-patched.vsix"
          echo "PATCHED_VSIX_NAME=${PATCHED_VSIX_NAME}" >> $GITHUB_ENV
          cd unpacked_ext/extension
          vsce package --out ../../${PATCHED_VSIX_NAME}
          echo "Patched VSIX created: ${PATCHED_VSIX_NAME}"

      - name: Create GitHub Release
        if: steps.version_check.outputs.skip_build == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ env.VERSION }}-patched"
          name: "Patched Augment v${{ env.VERSION }}"
          body: |
            This is an automated build of the Augment extension, patched with the interceptor script.

            - Original Extension Version: **${{ env.VERSION }}**
            - Patch Script: ${{ env.INTERCEPTOR_SCRIPT }}

            Install the `.vsix` file below manually in VS Code.
          files: "${{ env.PATCHED_VSIX_NAME }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
